{"version":3,"sources":["../../../widgets/AccuWeather/Widget.js"],"names":["declare","BaseWidget","lang","dom","domConstruct","domAttr","webMercatorUtils","esriRequest","PictureMarkerSymbol","Graphic","baseClass","postCreate","startup","pointGraphicsLayers","map","graphicsLayerIds","hitch","graphicsLayerId","graphicsLayer","getLayer","geometryType","parentDiv","create","set","divNode","arcgisProps","title","_map","_api_key","config","api_key","addEventListener","getWeatherIconForGraphic","graphic","lngLat","xyToLngLat","geometry","x","y","console","log","locationKeyRequest","url","content","handleAs","_gr","then","response","locationKey","Key","currentConditionsRequest","responseConditions","formattedIconNumber","WeatherIcon","slice","imgUrl","imgSymbol","graphics","add","error","message","layer","id","_graphicsVal","j","length","i","place","byId","_onClick","_onClickRestaurar"],"mappings":"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","file":"Widget.js","sourcesContent":["import declare from 'dojo/_base/declare';\r\nimport BaseWidget from 'jimu/BaseWidget';\r\n\r\nimport lang from 'dojo/_base/lang';\r\nimport dom from 'dojo/dom';\r\nimport domConstruct from 'dojo/dom-construct';\r\nimport domAttr from 'dojo/dom-attr';\r\n\r\nimport webMercatorUtils from 'esri/geometry/webMercatorUtils';\r\nimport esriRequest from 'esri/request';\r\nimport PictureMarkerSymbol from 'esri/symbols/PictureMarkerSymbol';\r\nimport Graphic from 'esri/graphic';\r\n\r\n// To create a widget, you need to derive from BaseWidget.\r\nexport default declare([BaseWidget], {\r\n\r\n  baseClass: 'accu-weather',\r\n  postCreate () {},\r\n  startup() {\r\n    let pointGraphicsLayers = this.map.graphicsLayerIds.map(lang.hitch(this, function(graphicsLayerId){\r\n      let graphicsLayer = this.map.getLayer(graphicsLayerId);\r\n      if(graphicsLayer.geometryType && graphicsLayer.geometryType === 'esriGeometryPoint'){\r\n\r\n        var parentDiv = domConstruct.create(\"div\");\r\n        domAttr.set(parentDiv, \"id\", \"parent_\" + graphicsLayerId);\r\n\r\n        var divNode = domConstruct.create(\"div\");\r\n        domAttr.set(divNode, \"class\", \"botonFiltro\");\r\n        domAttr.set(divNode, \"id\", graphicsLayerId);\r\n        domAttr.set(divNode, \"innerHTML\", graphicsLayer.arcgisProps.title);\r\n        let _map = this.map;\r\n        let _api_key = this.config.api_key;\r\n\r\n        divNode.addEventListener(\"click\", function(){\r\n          \r\n          let getWeatherIconForGraphic = (graphic) => {\r\n\r\n            let lngLat = webMercatorUtils.xyToLngLat(graphic.geometry.x, graphic.geometry.y);\r\n            console.log(lngLat);\r\n  \r\n            let locationKeyRequest = esriRequest({\r\n              url: \"https://dataservice.accuweather.com/locations/v1/cities/geoposition/search\",\r\n              content: {\"apikey\": _api_key, \"q\": lngLat[0] + ',' + lngLat[1]},\r\n              handleAs: \"json\"\r\n            });\r\n\r\n            let _gr = graphic;\r\n  \r\n            locationKeyRequest.then(\r\n              function(response) {\r\n                let locationKey = response.Key;\r\n  \r\n                let currentConditionsRequest = esriRequest({\r\n                  url: \"http://dataservice.accuweather.com/currentconditions/v1/\" + locationKey,\r\n                  content: {\"apikey\": _api_key},\r\n                  handleAs: \"json\"\r\n                });\r\n  \r\n                currentConditionsRequest.then(function(responseConditions){\r\n                  let formattedIconNumber = (\"0\" + responseConditions[0].WeatherIcon).slice(-2);\r\n                  let imgUrl = \"https://developer.accuweather.com/sites/default/files/\" + formattedIconNumber + \"-s.png\"\r\n                  let imgSymbol = new PictureMarkerSymbol(imgUrl, 75, 45);\r\n                  let graphic = new Graphic(_gr.geometry, imgSymbol);\r\n                  _map.graphics.add(graphic);\r\n                });\r\n  \r\n            }, function(error) {\r\n                console.log(\"Error: \", error.message);\r\n            });\r\n  \r\n          };\r\n          \r\n          let layer = _map.getLayer(this.id);\r\n          let graphics = layer._graphicsVal.map(function(graphic){return graphic;});\r\n          \r\n          let j = graphics.length;\r\n          if (graphics.length > 4){\r\n            j = 4;\r\n          }\r\n          for (let i = 0; i < j; i++){\r\n            getWeatherIconForGraphic(graphics[i]);\r\n          }\r\n                    \r\n          // layer._graphicsVal.map(function(graphic){\r\n          //   getWeatherIconForGraphic(graphic);\r\n          // });\r\n\r\n        });\r\n\r\n        domConstruct.place(parentDiv, dom.byId(\"bloqueFiltros\"));\r\n        domConstruct.place(divNode, parentDiv);\r\n      }\r\n    }));\r\n  },\r\n\r\n  _onClick(){\r\n    console.log(\"click\");\r\n  // var query = termometricasLayer.createQuery();\r\n    // \t\tvar results = termometricasLayer.queryFeatures(query).then(function(response) {\r\n    // \t\t\tvar geometries = response.features.map(function(feature) {\r\n    // \t\t\t  return feature.geometry;\r\n    // \t\t\t});\r\n          \r\n    // \t\t\tvar lngLat = webMercatorUtils.xyToLngLat(geometries[0].x, geometries[0].y);\r\n          \r\n    // \t\t});\r\n\r\n  },\r\n\r\n  _onClickRestaurar(){\r\n    console.log(\"click\");\r\n  }\r\n  \r\n  // onOpen() {\r\n  //   console.log('AccuWeather::onOpen');\r\n  // },\r\n  // onClose(){\r\n  //   console.log('AccuWeather::onClose');\r\n  // },\r\n  // onMinimize(){\r\n  //   console.log('AccuWeather::onMinimize');\r\n  // },\r\n  // onMaximize(){\r\n  //   console.log('AccuWeather::onMaximize');\r\n  // },\r\n  // onSignIn(credential){\r\n  //   console.log('AccuWeather::onSignIn', credential);\r\n  // },\r\n  // onSignOut(){\r\n  //   console.log('AccuWeather::onSignOut');\r\n  // }\r\n  // onPositionChange(){\r\n  //   console.log('AccuWeather::onPositionChange');\r\n  // },\r\n  // resize(){\r\n  //   console.log('AccuWeather::resize');\r\n  // }\r\n});\r\n"]}